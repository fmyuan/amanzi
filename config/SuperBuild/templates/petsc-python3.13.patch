--- petsc-3.20.0/config/BuildSystem/RDict.py	2023-09-28 18:01:16
+++ petsc-3.20.0_patch/config/BuildSystem/RDict.py	2025-05-24 22:46:30
@@ -83,7 +83,7 @@
   def __init__(self, parentAddr = None, parentDirectory = None, load = 1, autoShutdown = 1, readonly = False):
     import atexit
     import time
-    import xdrlib
+    #import xdrlib
 
     self.logFile         = None
     self.setupLogFile()
@@ -98,8 +98,8 @@
     self.isServer        = 0
     self.readonly        = readonly
     self.parentDirectory = parentDirectory
-    self.packer          = xdrlib.Packer()
-    self.unpacker        = xdrlib.Unpacker('')
+    #self.packer          = xdrlib.Packer()
+    #self.unpacker        = xdrlib.Unpacker('')
     self.stopCmd         = pickle.dumps(('stop',))
     self.writeLogLine('Greetings')
     self.connectParent(self.parentAddr, self.parentDirectory)
@@ -110,25 +110,25 @@
     return
 
   def __getstate__(self):
-    '''Remove any parent socket object, the XDR translators, and the log file from the dictionary before pickling'''
+    '''Remove any parent socket object, and the log file from the dictionary before pickling'''
     self.writeLogLine('Pickling RDict')
     d = self.__dict__.copy()
     if 'parent'    in d: del d['parent']
     if 'saveTimer' in d: del d['saveTimer']
     if '_setCommandLine' in d: del d['_setCommandLine']
-    del d['packer']
-    del d['unpacker']
+    #del d['packer']
+    #del d['unpacker']
     del d['logFile']
     return d
 
   def __setstate__(self, d):
-    '''Reconnect the parent socket object, recreate the XDR translators and reopen the log file after unpickling'''
+    '''Reconnect the parent socket object and reopen the log file after unpickling'''
     self.logFile  = open('RDict.log', 'a')
     self.writeLogLine('Unpickling RDict')
     self.__dict__.update(d)
-    import xdrlib
-    self.packer   = xdrlib.Packer()
-    self.unpacker = xdrlib.Unpacker('')
+    #import xdrlib
+    #self.packer   = xdrlib.Packer()
+    #self.unpacker = xdrlib.Unpacker('')
     self.connectParent(self.parentAddr, self.parentDirectory)
     return
 
@@ -477,13 +477,13 @@
       p = packet
     else:
       p = pickle.dumps(packet)
-    self.packer.reset()
-    self.packer.pack_uint(len(p))
+    #self.packer.reset()
+    #self.packer.pack_uint(len(p))
     if hasattr(s, 'write'):
-      s.write(self.packer.get_buffer())
+      #s.write(self.packer.get_buffer())
       s.write(p)
     else:
-      s.sendall(self.packer.get_buffer())
+      #s.sendall(self.packer.get_buffer())
       s.sendall(p)
     self.writeLogLine(source+': Sent packet')
     return
@@ -495,9 +495,9 @@
       s.read(4)
       value = pickle.load(s)
     else:
-      # I probably need to check that it actually read these 4 bytes
-      self.unpacker.reset(s.recv(4))
-      length    = self.unpacker.unpack_uint()
+      ## I probably need to check that it actually read these 4 bytes
+      #self.unpacker.reset(s.recv(4))
+      #length    = self.unpacker.unpack_uint()
       objString = ''
       while len(objString) < length:
         objString += s.recv(length - len(objString))
         
--- petsc-3.20.0/config/gmakegen.py	2023-09-28 18:01:16
+++ petsc-3.20.0_patched/config/gmakegen.py	2025-05-24 22:46:30
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 
 import os
-from sysconfig import _parse_makefile as parse_makefile
+#from sysconfig import _parse_makefile as parse_makefile
 import sys
 import logging
 sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
@@ -63,6 +63,16 @@
 
 def stripsplit(line):
   return line[len('#requires'):].replace("'","").split()
+
+def parse_makefile(fn, out=None):
+    if out is None:
+        out = {}
+    with open(fn) as f:
+        for l in f:
+            if "=" in l:
+                a,b = l.split("=", 1)
+                out[a.strip()] = b.strip()
+    return out
 
 PetscPKGS = 'sys vec mat dm ksp snes ts tao'.split()
 # the key is actually the language suffix, it won't work for suffixes such as 'kokkos.cxx' so use an _ and replace the _ as needed with .