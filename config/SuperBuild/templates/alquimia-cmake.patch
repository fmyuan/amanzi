--- alquimia-dev-1.1.0/CMakeLists.txt	2023-10-18 23:35:15
+++ alquimia-1.1.0-source/CMakeLists.txt	2024-05-30 14:20:38
@@ -10,11 +10,7 @@
 option(XSDK_ENABLE_DEBUG "Enables Debug mode builds [OFF]." OFF)
 option(BUILD_SHARED_LIBS "Builds shared libraries [ON]." ON)
 option(XSDK_WITH_PFLOTRAN "Enables support for the PFlotran chemistry engine [OFF]." OFF)
-#option(TPL_PFLOTRAN_LIBRARIES "List of absolute paths to PFlotran link libraries [].")
-#option(TPL_PFLOTRAN_INCLUDE_DIRS "List of absolute paths to PFlotran include directories [].")
 option(XSDK_WITH_CRUNCHFLOW "Enables support for the CrunchFlow chemistry engine [OFF]." OFF)
-#option(TPL_CRUNCHFLOW_LIBRARIES "List of absolute paths to CrunchFlow link libraries [].")
-#option(TPL_CRUNCHFLOW_INCLUDE_DIRS "List of absolute paths to CrunchFlow include directories [].")
 
 # For now, we disable shared libs on Macs.
 if (APPLE)
@@ -27,24 +23,24 @@
 
 # Make sure compilers are set. This must be done before enabling languages.
 if (NOT CMAKE_C_COMPILER)
-  if (NOT $ENV{CC} STREQUAL "")
-    set(CMAKE_C_COMPILER $ENV{CC})
+  if (NOT ${CC} STREQUAL "")
+    set(CMAKE_C_COMPILER ${CC})
   else()
     set(CMAKE_C_COMPILER cc)
   endif()
 endif()
 if (NOT CMAKE_C_FLAGS)
-  set(CMAKE_C_FLAGS $ENV{CFLAGS})
+  set(CMAKE_C_FLAGS ${CFLAGS})
 endif()
 if (NOT CMAKE_Fortran_COMPILER)
-  if (NOT $ENV{FC} STREQUAL "")
-    set(CMAKE_Fortran_COMPILER $ENV{FC})
+  if (NOT ${FC} STREQUAL "")
+    set(CMAKE_Fortran_COMPILER ${FC})
   else()
     set(CMAKE_Fortran_COMPILER gfortran)
   endif()
 endif()
 if (NOT CMAKE_Fortran_FLAGS)
-  set(CMAKE_Fortran_FLAGS $ENV{FCFLAGS})
+  set(CMAKE_Fortran_FLAGS ${FCFLAGS})
 endif()
 enable_language(C)
 enable_language(Fortran)
@@ -52,19 +48,19 @@
 # We declare the project here.
 project (alquimia)
 
-message(STATUS "C compiler is ${CMAKE_C_COMPILER} (${CMAKE_C_COMPILER_ID})")
-message(STATUS "Fortran compiler is ${CMAKE_Fortran_COMPILER} (${CMAKE_Fortran_COMPILER_ID})")
+message(STATUS "--- C compiler is ${CMAKE_C_COMPILER} (${CMAKE_C_COMPILER_ID})")
+message(STATUS "--- Fortran compiler is ${CMAKE_Fortran_COMPILER} (${CMAKE_Fortran_COMPILER_ID})")
 
 if (BUILD_SHARED_LIBS)
-  message(STATUS "Alquimia will be built as a shared library.")
+  message(STATUS "--- Alquimia will be built as a shared library.")
 else()
-  message(STATUS "Alquimia will be built as a static library.")
+  message(STATUS "--- Alquimia will be built as a static library.")
 endif()
 
 # Version numbers.
 set (ALQUIMIA_MAJOR_VERSION 1)
 set (ALQUIMIA_MINOR_VERSION 0)
-set (ALQUIMIA_PATCH_VERSION 0)
+set (ALQUIMIA_PATCH_VERSION 5)
 set (ALQUIMIA_VERSION "${ALQUIMIA_MAJOR_VERSION}.${ALQUIMIA_MINOR_VERSION}.${ALQUIMIA_PATCH_VERSION}")
 
 # General C compiler flags.
@@ -97,14 +93,15 @@
 
 # Figure out the system type.
 set(ALQUIMIA_HAVE_BOOL 1) # All reasonable C99 compilers have this now.
-if (APPLE EQUAL 1)
+if (APPLE)
   set(SYS_FLAGS "-DAPPLE=1")
   set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -framework Accelerate")
+  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -ld_classic")
 else ()
-  if (LINUX EQUAL 1)
+  if (LINUX)
     set(SYS_FLAGS "-DLINUX=1")
   else()
-    if (WIN32 EQUAL 1)
+    if (WIN32)
       set(ALQUIMIA_HAVE_BOOL 0) # MS doesn't have reasonable C compilers.
       set(SYS_FLAGS "-DWINDOWS=1")
     endif()
@@ -143,7 +140,7 @@
     endif()
   endforeach()
 
-  message(STATUS "Enabled support for PFlotran chemistry engine.")
+  message(STATUS "--- Enabled support for PFlotran chemistry engine.")
   list(APPEND ALQUIMIA_ENGINES pflotran)
   set(ALQUIMIA_HAVE_PFLOTRAN 1)
   set(ALQUIMIA_NEED_PETSC 1)
@@ -170,7 +167,7 @@
     endif()
   endforeach()
 
-  message(STATUS "Enabled support for CrunchFlow chemistry engine.")
+  message(STATUS "--- Enabled support for CrunchFlow chemistry engine.")
   list(APPEND ALQUIMIA_ENGINES crunchflow)
   set(ALQUIMIA_HAVE_CRUNCHFLOW 1)
   set(ALQUIMIA_NEED_PETSC 1)
@@ -185,17 +182,20 @@
 
 # If needed, Check for PETSc and set things up.
 if (ALQUIMIA_NEED_PETSC)
-  if ($ENV{PETSC_DIR} STREQUAL "")
+  if (NOT PETSC_DIR)
     message(FATAL_ERROR "PETSC_DIR must be set for the requested engines to be enabled.")
   endif()
-  set(PETSC_DIR $ENV{PETSC_DIR})
   if(DEFINED ENV{PETSC_ARCH})
-    set(PETSC_ARCH $ENV{PETSC_ARCH})
+    set(PETSC_ARCH ${PETSC_ARCH})
+  elseif(PETSC_DIR)
+    set(TPL_PETSC_INCLUDE_DIRS ${PETSC_DIR}/include)
+    set(TPL_PETSC_LDFLAGS -L${PETSC_DIR}/lib -lpetsc)
+    set(TPL_PETSC_LIBRARIES ${PETSC_LIBRARIES})
   endif()
 
   message(STATUS "--- SM: PETSC_DIR >>> ${PETSC_DIR}")
   message(STATUS "--- SM: PETSC_ARCH >>> ${PETSC_ARCH}")
-  
+
   # Do we have settings for PETSc's libraries/includes?
   if (TPL_PETSC_INCLUDE_DIRS)
     if (NOT TPL_PETSC_LDFLAGS)
@@ -207,7 +207,7 @@
 
   # Find PETSc.
   if (TPL_PETSC_INCLUDE_DIRS)
-
+    message(STATUS " -- Using TPL_PETSC_INCLUDE_DIR -- ${TPL_PETSC_INCLUDE_DIRS}")
     # Validate the include directories we've been given.
     foreach(inc ${TPL_PETSC_INCLUDE_DIRS})
       if (NOT EXISTS ${inc})
@@ -215,17 +215,18 @@
       endif()
     endforeach()
 
-    message(STATUS "Using PETSc includes: ${TPL_PETSC_INCLUDE_DIRS}")
-    message(STATUS "Using PETSc library flags: ${TPL_PETSC_LDFLAGS}")
+    message(STATUS "--- Using PETSc includes: ${TPL_PETSC_INCLUDE_DIRS}")
+    message(STATUS "--- Using PETSc library flags: ${TPL_PETSC_LDFLAGS}")
     set(PETSC_INCLUDES ${TPL_PETSC_INCLUDE_DIRS})
     set(PETSC_LDFLAGS ${TPL_PETSC_LDFLAGS})
     set(PETSC_FOUND TRUE)
   else()
     # Try to detect PETSc if we haven't been told where it is.
-    find_package(PETSc)
     message(STATUS "--- SM: finding PETSc with find_package")
-    message(STATUS "--- SM: PETSC_INCLUDES >>> ${PETSC_INCLUDES}")
-    message(STATUS "--- SM: PETSC_LDFLAGS >>> ${PETSC_LDFLAGS}")
+    find_package(PETSc)
+    message(STATUS "--- SM: PETSC_ARCH         >>> ${PETSC_ARCH}")
+    message(STATUS "--- SM: PETSC_INCLUDES     >>> ${PETSC_INCLUDES}")
+    message(STATUS "--- SM: PETSC_LIBRARIES    >>> ${PETSC_LIBRARIES}")
   endif()
   if (NOT PETSC_FOUND)
     message(FATAL_ERROR "PETSc was not found.")
@@ -241,6 +242,12 @@
   message(STATUS "--- SM: cmake install rpath")
 endif()
 
+# Find LAPACK
+if (NOT LAPACK_LIBRARIES)
+  find_package(LAPACK REQUIRED)
+endif()
+message(STATUS " --- SM: LAPACK_LIBRARIES = ${LAPACK_LIBRARIES}")
+
 # Include the binary directory in the header file search path,
 # since it's where we place generated files.
 include_directories("${PROJECT_BINARY_DIR}")

--- alquimia-dev-1.1.0/alquimia/CMakeLists.txt    2023-10-18 23:35:15
+++ /Users/f9y/ATS_ROOT/build/amanzi-tpls/alquimia/alquimia-1.1.0-source/alquimia/CMakeLists.txt    2024-05-29 23:40:29
@@ -20,6 +20,7 @@
 
 # CrunchFlow engine.
 if (ALQUIMIA_HAVE_CRUNCHFLOW)
+  list(APPEND ALQUIMIA_TPLS ${LAPACK_LIBRARIES})
   list(APPEND ALQUIMIA_TPLS ${TPL_CRUNCHFLOW_LIBRARIES})
   list(APPEND ALQUIMIA_INCLUDE_DIRS ${TPL_CRUNCHFLOW_INCLUDE_DIRS})
   list(APPEND ALQUIMIA_SOURCES crunch_alquimia_interface.F90 crunch_alquimia_wrappers.F90)
